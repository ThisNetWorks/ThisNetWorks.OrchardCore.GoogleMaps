
@await DisplayAsync(await New.DisplayMapsContainer())

<script asp-name="google-maps-init" depends-on="jquery" at="Foot">

    var map;
    var setMarker = function (position, path, map) {
        var marker = new google.maps.Marker({
            position: position,
            map: map,
            path: path
        });

        return marker;
    };

    var mapInit = function () {
        var mapData = [];    

        var googleMapData = document.querySelectorAll(".google-map-data");
        if (googleMapData) {
            for (var i = 0; i < googleMapData.length; i++) {
                var data = googleMapData[i].dataset.googleMapData;
                var item = JSON.parse(data);
                mapData.push(item.marker);
            }
        }

        var googleMapsData = document.querySelectorAll(".google-maps-data");
        if (googleMapsData) {
            for (var i = 0; i < googleMapsData.length; i++) {
                var data = googleMapsData[i].dataset.googleMapsData;
                if (data) {
                    var items = JSON.parse(data);
                    for (var d = 0; d < items.length; d++) {
                        mapData.push(items[d].marker);
                    }
                }
            }
        }

        var mapSettingsData = document.getElementById('google-map-settings').dataset.googleMapSettings;
        var mapSettings = JSON.parse(mapSettingsData);

        map = new google.maps.Map(document.getElementById('google-map'), {
            center: { lat: mapSettings.defaultLat, lng: mapSettings.defaultLng },
            zoom: 8
        });

        var bounds = new google.maps.LatLngBounds();
        for (var i = 0; i < mapData.length; i++) {
            var item = mapData[i];
            var marker = setMarker(new google.maps.LatLng(item.lat, item.lng), item.path, map);
            bounds.extend(marker.position);
            google.maps.event.addListener(marker, 'click', function () {
                window.location.href = item.path;
            });
        };

        map.fitBounds(bounds);
    }
</script>

@* Due to ordering issues this must be called manually, not through a shape wrapper. *@
@await DisplayAsync(await New.DisplayMap_Wrapper__Settings())