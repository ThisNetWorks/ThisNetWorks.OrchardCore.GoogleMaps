
@await DisplayAsync(await New.DisplayMapsContainer())

<script asp-name="google-maps-init" depends-on="jquery, google-maps-polygon, google-maps-marker" at="Foot">

    var map;

    var clickHandler = function(path) {
        window.location.href = path;
    }

    var setMarker = function (position, path, map) {
        var marker = new google.maps.Marker({
            position: position,
            map: map,
            path: path
        });

        return marker;
    };

    var setPolygon = function (polygon, map) {
        var shape = new google.maps.Polygon({
            paths: polygon.latLngs.map(latLng => new google.maps.LatLng(latLng.lat, latLng.lng)),
            strokeColor: polygon.strokeColor,
            strokeOpacity: polygon.strokeOpacity,
            strokeWeight: polygon.strokeWeight,
            fillColor: polygon.fillColor,
            fillOpacity: polygon.fillOpacity
        });
        shape.setMap(map);

        return shape;
    };    

    var mapInit = function () {
        var mapItems = [];    

        var googleMapData = document.querySelectorAll(".google-map-data");
        if (googleMapData) {
            for (var i = 0; i < googleMapData.length; i++) {
                var data = googleMapData[i].dataset.googleMapData;
                var item = JSON.parse(data);
                mapItems.push(item);
            }
        }

        var googleMapsData = document.querySelectorAll(".google-maps-data");
        if (googleMapsData) {
            for (var i = 0; i < googleMapsData.length; i++) {
                var data = googleMapsData[i].dataset.googleMapsData;
                if (data) {
                    var items = JSON.parse(data);
                    for (var d = 0; d < items.length; d++) {
                        mapItems.push(items[d]);
                    }
                }
            }
        }

        var mapSettingsData = document.getElementById('google-map-settings').dataset.googleMapSettings;
        var mapSettings = JSON.parse(mapSettingsData);

        map = new google.maps.Map(document.getElementById('google-map'), {
            center: { lat: mapSettings.defaultMarker.lat, lng: mapSettings.defaultMarker.lng },
            zoom: 8
        });

        var bounds = new google.maps.LatLngBounds();
        for (var i = 0; i < mapItems.length; i++) {
            var mapItem = mapItems[i];
            if (mapItem.marker) {
                var marker = setMarker(new google.maps.LatLng(mapItem.marker.lat, mapItem.marker.lng), mapItem.path, map);
                bounds.extend(marker.position);
                google.maps.event.addListener(marker, 'click', function () {
                    clickHandler(mapItem.path);
                });
            }
            if (mapItem.polygons && mapItem.polygons.length > 0) {
                for (var p = 0; p < mapItem.polygons.length; p++) {
                    var polygon = mapItem.polygons[p];
                    var shape = setPolygon(polygon, map); 
                    google.maps.event.addListener(shape, 'click', function () {
                        clickHandler(mapItem.path);
                    });                    
                    var vertices = shape.getPath();
                    for (let i = 0; i < vertices.getLength(); i++) {
                        var xy = vertices.getAt(i);
                        bounds.extend(xy);
                    }   
                }
            }
        };

        map.fitBounds(bounds);
    }
</script>

@* Due to ordering issues this must be called manually, not through a shape wrapper. *@
@await DisplayAsync(await New.DisplayMap_Wrapper__Settings())